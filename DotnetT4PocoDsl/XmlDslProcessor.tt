<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
//Generated file. Do not edit it manually.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
<#
    //Define your inputs below
    var inputs = new[]
    {
        "Commands.xml",
        "Events.xml"
    };

    var firstCharToLower = new Func<string, string>(s => Char.ToLowerInvariant(s[0]) + s.Substring(1));

    //Processing inputs
    foreach (var input in inputs)
    {
        var source = Host.ResolvePath(input); //Resolve actual path of the input file
        var sourceDoc = XDocument.Load(source);
        #>

namespace <#= sourceDoc.Root.Attribute("namespace").Value #>
{<#
    foreach (var classDefElement in sourceDoc.Root.Elements()) //Each element in the doc is a DSL class definition
    {
        var propertyDefAttribs = classDefElement.Attributes().ToList(); //Each attribute is a property of the DSL class
        #>

    public class <#= classDefElement.Name #> : IEquatable<<#= classDefElement.Name #>>
    {
<# /***************************** Properties ***********************/ #>
<#
        foreach (var property in propertyDefAttribs)
        {
            #>        public <#= property.Value #> <#= property.Name #> { get; set; }
<#
        } #>

<# /***************************** Constructor ***********************/ #>
<#
        var constructorArgs = propertyDefAttribs
            .Select(property => property.Value + " " + firstCharToLower(property.Name.LocalName) + " = default(" + property.Value + ")");
        #>
        public <#= classDefElement.Name #>(<#= String.Join(", ", constructorArgs) #>)
        {
<#
        for (var i = 0; i < propertyDefAttribs.Count(); i++)
        {
            var property = propertyDefAttribs.ElementAt(i);
            #>            <#= property.Name #> = <#= firstCharToLower(property.Name.LocalName) #>;
<#
        }
#>
        }

<# /***************************** Equals ***********************/ #>
<#
        var equalityParts = propertyDefAttribs.Select(property =>
        {
            if (property.Value == "XElement")
                return "XNode.DeepEquals(" + property.Name + ", other." + property.Name + ")";
            if (property.Value.StartsWith("IDictionary"))
                return property.Name + ".SequenceEqual(" + "other." + property.Name + ")";
            return property.Name + " == " + "other." + property.Name;
        });
        #>
        public bool Equals(<#= classDefElement.Name #> other)
        {
            return <#= String.Join(" &&\r\n           ", equalityParts) #>;
        }

<# /***************************** ToString ***********************/ #>
<# var toStringParts = propertyDefAttribs.Select(property => "\"" + property.Name + ": \", " + property.Name); #>
        public override string ToString()
        {
            return String.Concat("<<#= classDefElement.Name #> ", <#= String.Join(", \", \" , ", toStringParts) #>, ">");
        }
    }
<#
    }
#>
}<#
    }
#>